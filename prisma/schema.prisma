generator client {
  provider = "prisma-client-js"
  output   = "../src/types/database"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model attribute_option_images {
  id                  Int                                @id @default(autoincrement())
  attribute_option_id Int
  image_type          attribute_option_images_image_type @default(front)
  display_order       Int?                               @default(0)
  image_url_thumb     String                             @db.VarChar(255)
  image_url_normal    String?                            @db.VarChar(255)
  image_url_zoom      String?                            @db.VarChar(255)
  alt_text            String?                            @db.VarChar(255)
  created_at          DateTime                           @default(now()) @db.Timestamp(0)
  updated_at          DateTime                           @default(now()) @db.Timestamp(0)
  attribute_options   attribute_options                  @relation(fields: [attribute_option_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_aoi_attribute_option")

  @@unique([attribute_option_id, image_type], map: "unique_attribute_option_type")
  @@index([attribute_option_id], map: "idx_attribute_option")
}

model attribute_options {
  id                        Int                         @id @default(autoincrement())
  attribute_id              Int
  value                     String                      @db.VarChar(255)
  additional_cost           Decimal?                    @default(0.00) @db.Decimal(10, 2)
  attribute_option_images   attribute_option_images[]
  variant_attribute_options variant_attribute_options[]

  @@index([attribute_id], map: "idx_attribute")
}

model attributes {
  id           Int                     @id @default(autoincrement())
  name         String                  @db.VarChar(255)
  display_type attributes_display_type @default(select)
}

model banner {
  id            Int      @id @default(autoincrement())
  title         String   @db.VarChar(255)
  subtitle      String?  @db.VarChar(255)
  description   String?  @db.Text
  created_at    DateTime @default(now()) @db.Timestamp(0)
  updated_at    DateTime @default(now()) @db.Timestamp(0)
  display_order Int?
  link          String?  @db.VarChar(255)
  image_url     String?  @db.VarChar(255)
}

model brands {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(255)
}

model categories {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(255)
  description String? @db.Text
  parent_id   Int?
  image_url   String? @db.VarChar(255)

  @@index([parent_id], map: "idx_parent")
}

model customers {
  id                  Int                   @id @default(autoincrement())
  username            String                @db.VarChar(255)
  email               String                @unique(map: "email") @db.VarChar(255)
  password            String                @db.VarChar(255)
  address_id          Int?
  is_active           Boolean?              @default(true)
  created_at          DateTime              @default(now()) @db.Timestamp(0)
  updated_at          DateTime              @default(now()) @db.Timestamp(0)
  lastname            String                @db.VarChar(255)
  photo               String?               @db.VarChar(255)
  name                String?               @db.VarChar(255)
  customers_addresses customers_addresses[]
  variant_ratings     variant_ratings[]
}

model customers_addresses {
  id          Int        @id @default(autoincrement())
  name        String?    @db.VarChar(255)
  description String?    @db.VarChar(255)
  id_customer Int?
  created_at  DateTime   @default(now()) @db.Timestamp(0)
  updated_at  DateTime   @default(now()) @db.Timestamp(0)
  customers   customers? @relation(fields: [id_customer], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "customers_addresses_ibfk_1")

  @@index([id_customer], map: "id_customer")
}

model permissions {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
}

model product_categories {
  product_id  Int
  category_id Int

  @@id([product_id, category_id])
  @@index([category_id], map: "idx_category")
}

model product_variants {
  id                        Int                         @id @default(autoincrement())
  product_id                Int
  sku                       String                      @unique(map: "sku") @db.VarChar(255)
  price                     Decimal                     @db.Decimal(10, 2)
  stock                     Int                         @default(0)
  created_at                DateTime                    @default(now()) @db.Timestamp(0)
  updated_at                DateTime                    @default(now()) @db.Timestamp(0)
  products                  products                    @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_variant_product")
  promotion_variants        promotion_variants[]
  variant_attribute_options variant_attribute_options[]
  variant_images            variant_images[]
  variant_ratings           variant_ratings[]

  @@index([product_id], map: "idx_product")
}

model products {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  description      String?            @db.Text
  brand_id         Int?
  created_at       DateTime           @default(now()) @db.Timestamp(0)
  updated_at       DateTime           @default(now()) @db.Timestamp(0)
  base_price       Decimal?           @db.Decimal(10, 2)
  product_variants product_variants[]

  @@index([brand_id], map: "idx_brand")
}

model promotion_variants {
  promotion_id     Int
  variant_id       Int
  promotion_price  Decimal?         @db.Decimal(10, 2)
  stock_limit      Int?
  created_at       DateTime         @default(now()) @db.Timestamp(0)
  promotions       promotions       @relation(fields: [promotion_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_promotion_variants_promotion")
  product_variants product_variants @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_promotion_variants_variant")

  @@id([promotion_id, variant_id])
  @@index([variant_id], map: "idx_variant")
}

model promotions {
  id                  Int                      @id @default(autoincrement())
  name                String                   @db.VarChar(255)
  description         String?                  @db.Text
  start_date          DateTime                 @db.DateTime(0)
  end_date            DateTime                 @db.DateTime(0)
  discount_type       promotions_discount_type @default(percentage)
  discount_value      Decimal                  @db.Decimal(10, 2)
  min_purchase_amount Decimal?                 @db.Decimal(10, 2)
  is_active           Boolean                  @default(true)
  created_at          DateTime                 @default(now()) @db.Timestamp(0)
  updated_at          DateTime                 @default(now()) @db.Timestamp(0)
  promotion_variants  promotion_variants[]
}

model rating_images {
  id              Int             @id @default(autoincrement())
  rating_id       Int
  image_url       String          @db.VarChar(255)
  created_at      DateTime        @default(now()) @db.Timestamp(0)
  variant_ratings variant_ratings @relation(fields: [rating_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_rating_image")

  @@index([rating_id], map: "idx_rating")
}

model roles {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255)
  created_at     DateTime         @default(now()) @db.Timestamp(0)
  updated_at     DateTime         @default(now()) @db.Timestamp(0)
  roles_sections roles_sections[]
  users          users[]
}

model roles_sections {
  id         Int       @id @default(autoincrement())
  id_section Int?
  id_rol     Int?
  sections   sections? @relation(fields: [id_section], references: [id], onDelete: Cascade, map: "roles_sections_ibfk_1")
  roles      roles?    @relation(fields: [id_rol], references: [id], onDelete: Cascade, map: "roles_sections_ibfk_2")

  @@index([id_rol], map: "id_rol")
  @@index([id_section], map: "id_section")
}

model sections {
  id             Int              @id @default(autoincrement())
  name           String?          @db.VarChar(255)
  url            String?          @db.VarChar(255)
  image          String?          @db.VarChar(255)
  display_order  Int?
  roles_sections roles_sections[]
}

model services {
  id              Int               @id @default(autoincrement())
  title           String            @db.VarChar(255)
  subtitle        String?           @db.VarChar(255)
  image_url       String?           @db.VarChar(255)
  slug            String?           @unique(map: "slug") @db.VarChar(255)
  description     String?           @db.Text
  created_at      DateTime          @default(now()) @db.Timestamp(0)
  updated_at      DateTime          @default(now()) @db.Timestamp(0)
  display_order   Int?
  services_images services_images[]
}

model services_images {
  id            Int       @id @default(autoincrement())
  title         String?   @db.VarChar(255)
  subtitle      String?   @db.VarChar(255)
  description   String?   @db.Text
  created_at    DateTime  @default(now()) @db.Timestamp(0)
  updated_at    DateTime  @default(now()) @db.Timestamp(0)
  display_order Int?
  id_service    Int?
  image_url     String?   @db.VarChar(255)
  services      services? @relation(fields: [id_service], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "services_images_ibfk_1")

  @@index([id_service], map: "id_service")
}

model users {
  id         Int      @id @default(autoincrement())
  username   String   @db.VarChar(255)
  email      String   @unique(map: "email") @db.VarChar(255)
  password   String   @db.VarChar(255)
  role_id    Int
  is_active  Boolean? @default(true)
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)
  lastname   String   @db.VarChar(255)
  photo      String?  @db.VarChar(255)
  roles      roles    @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "users_ibfk_1")

  @@index([role_id], map: "role_id")
}

model variant_attribute_options {
  variant_id          Int
  attribute_option_id Int
  attribute_options   attribute_options @relation(fields: [attribute_option_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_vao_attribute_option")
  product_variants    product_variants  @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_vao_variant")

  @@id([variant_id, attribute_option_id])
  @@unique([variant_id, attribute_option_id], map: "unique_variant_attribute")
  @@index([attribute_option_id], map: "idx_attribute_option")
  @@index([variant_id], map: "idx_variant")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model variant_images {
  id               Int                       @id @default(autoincrement())
  variant_id       Int
  image_type       variant_images_image_type @default(front)
  image_url_thumb  String                    @db.VarChar(255)
  image_url_normal String                    @db.VarChar(255)
  image_url_zoom   String                    @db.VarChar(255)
  is_primary       Boolean?                  @default(false)
  display_order    Int?                      @default(0)
  alt_text         String?                   @db.VarChar(255)
  created_at       DateTime                  @default(now()) @db.Timestamp(0)
  updated_at       DateTime                  @default(now()) @db.Timestamp(0)
  product_variants product_variants          @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_vi_variant")

  @@index([image_type, display_order], map: "idx_type_order")
  @@index([variant_id], map: "idx_variant")
}

model variant_ratings {
  id                Int              @id @default(autoincrement())
  variant_id        Int
  customer_id       Int
  rating            Int              @default(5) @db.TinyInt
  review            String?          @db.Text
  title             String?          @db.VarChar(255)
  verified_purchase Boolean          @default(false)
  created_at        DateTime         @default(now()) @db.Timestamp(0)
  updated_at        DateTime         @default(now()) @db.Timestamp(0)
  rating_images     rating_images[]
  customers         customers        @relation(fields: [customer_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_rating_customer")
  product_variants  product_variants @relation(fields: [variant_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "fk_rating_variant")

  @@unique([customer_id, variant_id], map: "unique_customer_variant")
  @@index([customer_id], map: "idx_customer")
  @@index([variant_id], map: "idx_variant")
}

enum attribute_option_images_image_type {
  front
  back
  left
  right
  top
  bottom
  detail
  lifestyle
  packaging
}

enum attributes_display_type {
  radio
  pills
  select
  color
  custom
}

enum variant_images_image_type {
  front
  back
  left
  right
  top
  bottom
  detail
  lifestyle
  packaging
}

enum promotions_discount_type {
  percentage
  fixed_amount
}
