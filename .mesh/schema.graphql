schema {
  query: Query
  mutation: Mutation
}

directive @transport(subgraph: String, kind: String, location: String) repeatable on SCHEMA

directive @mysqlSelect(subgraph: String, table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlInsert(subgraph: String, table: String, primaryKeys: [String]) on FIELD_DEFINITION

directive @mysqlUpdate(subgraph: String, table: String, columnMap: [[String]]) on FIELD_DEFINITION

directive @mysqlDelete(subgraph: String, table: String) on FIELD_DEFINITION

directive @mysqlTableForeign(subgraph: String, columnName: String) on FIELD_DEFINITION

directive @mysqlCount(subgraph: String, table: String) on FIELD_DEFINITION

type Query {
  attributeOptionImages(limit: Int, offset: Int, where: AttributeOptionImagesWhereInput, orderBy: AttributeOptionImagesOrderByInput): [AttributeOptionImages] @mysqlSelect(subgraph: "Database", table: "attribute_option_images")
  countAttributeOptionImages(where: AttributeOptionImagesWhereInput): Int @mysqlCount(subgraph: "Database", table: "attribute_option_images")
  attributeOptions(limit: Int, offset: Int, where: AttributeOptionsWhereInput, orderBy: AttributeOptionsOrderByInput): [AttributeOptions] @mysqlSelect(subgraph: "Database", table: "attribute_options")
  countAttributeOptions(where: AttributeOptionsWhereInput): Int @mysqlCount(subgraph: "Database", table: "attribute_options")
  attributes(limit: Int, offset: Int, where: AttributesWhereInput, orderBy: AttributesOrderByInput): [Attributes] @mysqlSelect(subgraph: "Database", table: "attributes")
  countAttributes(where: AttributesWhereInput): Int @mysqlCount(subgraph: "Database", table: "attributes")
  banner(limit: Int, offset: Int, where: BannerWhereInput, orderBy: BannerOrderByInput): [Banner] @mysqlSelect(subgraph: "Database", table: "banner")
  countBanner(where: BannerWhereInput): Int @mysqlCount(subgraph: "Database", table: "banner")
  brands(limit: Int, offset: Int, where: BrandsWhereInput, orderBy: BrandsOrderByInput): [Brands] @mysqlSelect(subgraph: "Database", table: "brands")
  countBrands(where: BrandsWhereInput): Int @mysqlCount(subgraph: "Database", table: "brands")
  categories(limit: Int, offset: Int, where: CategoriesWhereInput, orderBy: CategoriesOrderByInput): [Categories] @mysqlSelect(subgraph: "Database", table: "categories")
  countCategories(where: CategoriesWhereInput): Int @mysqlCount(subgraph: "Database", table: "categories")
  customers(limit: Int, offset: Int, where: CustomersWhereInput, orderBy: CustomersOrderByInput): [Customers] @mysqlSelect(subgraph: "Database", table: "customers")
  countCustomers(where: CustomersWhereInput): Int @mysqlCount(subgraph: "Database", table: "customers")
  customersAddresses(limit: Int, offset: Int, where: CustomersAddressesWhereInput, orderBy: CustomersAddressesOrderByInput): [CustomersAddresses] @mysqlSelect(subgraph: "Database", table: "customers_addresses")
  countCustomersAddresses(where: CustomersAddressesWhereInput): Int @mysqlCount(subgraph: "Database", table: "customers_addresses")
  permissions(limit: Int, offset: Int, where: PermissionsWhereInput, orderBy: PermissionsOrderByInput): [Permissions] @mysqlSelect(subgraph: "Database", table: "permissions")
  countPermissions(where: PermissionsWhereInput): Int @mysqlCount(subgraph: "Database", table: "permissions")
  productCategories(limit: Int, offset: Int, where: ProductCategoriesWhereInput, orderBy: ProductCategoriesOrderByInput): [ProductCategories] @mysqlSelect(subgraph: "Database", table: "product_categories")
  countProductCategories(where: ProductCategoriesWhereInput): Int @mysqlCount(subgraph: "Database", table: "product_categories")
  productRatingSummary(limit: Int, offset: Int, where: ProductRatingSummaryWhereInput, orderBy: ProductRatingSummaryOrderByInput): [ProductRatingSummary] @mysqlSelect(subgraph: "Database", table: "product_rating_summary")
  countProductRatingSummary(where: ProductRatingSummaryWhereInput): Int @mysqlCount(subgraph: "Database", table: "product_rating_summary")
  productVariants(limit: Int, offset: Int, where: ProductVariantsWhereInput, orderBy: ProductVariantsOrderByInput): [ProductVariants] @mysqlSelect(subgraph: "Database", table: "product_variants")
  countProductVariants(where: ProductVariantsWhereInput): Int @mysqlCount(subgraph: "Database", table: "product_variants")
  products(limit: Int, offset: Int, where: ProductsWhereInput, orderBy: ProductsOrderByInput): [Products] @mysqlSelect(subgraph: "Database", table: "products")
  countProducts(where: ProductsWhereInput): Int @mysqlCount(subgraph: "Database", table: "products")
  promotionVariants(limit: Int, offset: Int, where: PromotionVariantsWhereInput, orderBy: PromotionVariantsOrderByInput): [PromotionVariants] @mysqlSelect(subgraph: "Database", table: "promotion_variants")
  countPromotionVariants(where: PromotionVariantsWhereInput): Int @mysqlCount(subgraph: "Database", table: "promotion_variants")
  promotions(limit: Int, offset: Int, where: PromotionsWhereInput, orderBy: PromotionsOrderByInput): [Promotions] @mysqlSelect(subgraph: "Database", table: "promotions")
  countPromotions(where: PromotionsWhereInput): Int @mysqlCount(subgraph: "Database", table: "promotions")
  ratingImages(limit: Int, offset: Int, where: RatingImagesWhereInput, orderBy: RatingImagesOrderByInput): [RatingImages] @mysqlSelect(subgraph: "Database", table: "rating_images")
  countRatingImages(where: RatingImagesWhereInput): Int @mysqlCount(subgraph: "Database", table: "rating_images")
  roles(limit: Int, offset: Int, where: RolesWhereInput, orderBy: RolesOrderByInput): [Roles] @mysqlSelect(subgraph: "Database", table: "roles")
  countRoles(where: RolesWhereInput): Int @mysqlCount(subgraph: "Database", table: "roles")
  rolesSections(limit: Int, offset: Int, where: RolesSectionsWhereInput, orderBy: RolesSectionsOrderByInput): [RolesSections] @mysqlSelect(subgraph: "Database", table: "roles_sections")
  countRolesSections(where: RolesSectionsWhereInput): Int @mysqlCount(subgraph: "Database", table: "roles_sections")
  sections(limit: Int, offset: Int, where: SectionsWhereInput, orderBy: SectionsOrderByInput): [Sections] @mysqlSelect(subgraph: "Database", table: "sections")
  countSections(where: SectionsWhereInput): Int @mysqlCount(subgraph: "Database", table: "sections")
  services(limit: Int, offset: Int, where: ServicesWhereInput, orderBy: ServicesOrderByInput): [Services] @mysqlSelect(subgraph: "Database", table: "services")
  countServices(where: ServicesWhereInput): Int @mysqlCount(subgraph: "Database", table: "services")
  servicesImages(limit: Int, offset: Int, where: ServicesImagesWhereInput, orderBy: ServicesImagesOrderByInput): [ServicesImages] @mysqlSelect(subgraph: "Database", table: "services_images")
  countServicesImages(where: ServicesImagesWhereInput): Int @mysqlCount(subgraph: "Database", table: "services_images")
  users(limit: Int, offset: Int, where: UsersWhereInput, orderBy: UsersOrderByInput): [Users] @mysqlSelect(subgraph: "Database", table: "users")
  countUsers(where: UsersWhereInput): Int @mysqlCount(subgraph: "Database", table: "users")
  variantAttributeOptions(limit: Int, offset: Int, where: VariantAttributeOptionsWhereInput, orderBy: VariantAttributeOptionsOrderByInput): [VariantAttributeOptions] @mysqlSelect(subgraph: "Database", table: "variant_attribute_options")
  countVariantAttributeOptions(where: VariantAttributeOptionsWhereInput): Int @mysqlCount(subgraph: "Database", table: "variant_attribute_options")
  variantImages(limit: Int, offset: Int, where: VariantImagesWhereInput, orderBy: VariantImagesOrderByInput): [VariantImages] @mysqlSelect(subgraph: "Database", table: "variant_images")
  countVariantImages(where: VariantImagesWhereInput): Int @mysqlCount(subgraph: "Database", table: "variant_images")
  variantRatingSummary(limit: Int, offset: Int, where: VariantRatingSummaryWhereInput, orderBy: VariantRatingSummaryOrderByInput): [VariantRatingSummary] @mysqlSelect(subgraph: "Database", table: "variant_rating_summary")
  countVariantRatingSummary(where: VariantRatingSummaryWhereInput): Int @mysqlCount(subgraph: "Database", table: "variant_rating_summary")
  variantRatings(limit: Int, offset: Int, where: VariantRatingsWhereInput, orderBy: VariantRatingsOrderByInput): [VariantRatings] @mysqlSelect(subgraph: "Database", table: "variant_ratings")
  countVariantRatings(where: VariantRatingsWhereInput): Int @mysqlCount(subgraph: "Database", table: "variant_ratings")
}

type Mutation {
  insertAttributeOptionImages(attribute_option_images: AttributeOptionImagesInsertInput!): AttributeOptionImages @mysqlInsert(subgraph: "Database", table: "attribute_option_images", primaryKeys: ["id"])
  updateAttributeOptionImages(attribute_option_images: AttributeOptionImagesUpdateInput!, where: AttributeOptionImagesWhereInput): AttributeOptionImages @mysqlUpdate(subgraph: "Database", table: "attribute_option_images")
  deleteAttributeOptionImages(where: AttributeOptionImagesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "attribute_option_images")
  insertAttributeOptions(attribute_options: AttributeOptionsInsertInput!): AttributeOptions @mysqlInsert(subgraph: "Database", table: "attribute_options", primaryKeys: ["id"])
  updateAttributeOptions(attribute_options: AttributeOptionsUpdateInput!, where: AttributeOptionsWhereInput): AttributeOptions @mysqlUpdate(subgraph: "Database", table: "attribute_options")
  deleteAttributeOptions(where: AttributeOptionsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "attribute_options")
  insertAttributes(attributes: AttributesInsertInput!): Attributes @mysqlInsert(subgraph: "Database", table: "attributes", primaryKeys: ["id"])
  updateAttributes(attributes: AttributesUpdateInput!, where: AttributesWhereInput): Attributes @mysqlUpdate(subgraph: "Database", table: "attributes")
  deleteAttributes(where: AttributesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "attributes")
  insertBanner(banner: BannerInsertInput!): Banner @mysqlInsert(subgraph: "Database", table: "banner", primaryKeys: ["id"])
  updateBanner(banner: BannerUpdateInput!, where: BannerWhereInput): Banner @mysqlUpdate(subgraph: "Database", table: "banner")
  deleteBanner(where: BannerWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "banner")
  insertBrands(brands: BrandsInsertInput!): Brands @mysqlInsert(subgraph: "Database", table: "brands", primaryKeys: ["id"])
  updateBrands(brands: BrandsUpdateInput!, where: BrandsWhereInput): Brands @mysqlUpdate(subgraph: "Database", table: "brands")
  deleteBrands(where: BrandsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "brands")
  insertCategories(categories: CategoriesInsertInput!): Categories @mysqlInsert(subgraph: "Database", table: "categories", primaryKeys: ["id"])
  updateCategories(categories: CategoriesUpdateInput!, where: CategoriesWhereInput): Categories @mysqlUpdate(subgraph: "Database", table: "categories")
  deleteCategories(where: CategoriesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "categories")
  insertCustomers(customers: CustomersInsertInput!): Customers @mysqlInsert(subgraph: "Database", table: "customers", primaryKeys: ["id"])
  updateCustomers(customers: CustomersUpdateInput!, where: CustomersWhereInput): Customers @mysqlUpdate(subgraph: "Database", table: "customers")
  deleteCustomers(where: CustomersWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "customers")
  insertCustomersAddresses(customers_addresses: CustomersAddressesInsertInput!): CustomersAddresses @mysqlInsert(subgraph: "Database", table: "customers_addresses", primaryKeys: ["id"])
  updateCustomersAddresses(customers_addresses: CustomersAddressesUpdateInput!, where: CustomersAddressesWhereInput): CustomersAddresses @mysqlUpdate(subgraph: "Database", table: "customers_addresses")
  deleteCustomersAddresses(where: CustomersAddressesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "customers_addresses")
  insertPermissions(permissions: PermissionsInsertInput!): Permissions @mysqlInsert(subgraph: "Database", table: "permissions", primaryKeys: ["id"])
  updatePermissions(permissions: PermissionsUpdateInput!, where: PermissionsWhereInput): Permissions @mysqlUpdate(subgraph: "Database", table: "permissions")
  deletePermissions(where: PermissionsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "permissions")
  insertProductCategories(product_categories: ProductCategoriesInsertInput!): ProductCategories @mysqlInsert(subgraph: "Database", table: "product_categories", primaryKeys: ["product_id", "category_id"])
  updateProductCategories(product_categories: ProductCategoriesUpdateInput!, where: ProductCategoriesWhereInput): ProductCategories @mysqlUpdate(subgraph: "Database", table: "product_categories")
  deleteProductCategories(where: ProductCategoriesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "product_categories")
  insertProductRatingSummary(product_rating_summary: ProductRatingSummaryInsertInput!): ProductRatingSummary @mysqlInsert(subgraph: "Database", table: "product_rating_summary", primaryKeys: [])
  updateProductRatingSummary(product_rating_summary: ProductRatingSummaryUpdateInput!, where: ProductRatingSummaryWhereInput): ProductRatingSummary @mysqlUpdate(subgraph: "Database", table: "product_rating_summary")
  deleteProductRatingSummary(where: ProductRatingSummaryWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "product_rating_summary")
  insertProductVariants(product_variants: ProductVariantsInsertInput!): ProductVariants @mysqlInsert(subgraph: "Database", table: "product_variants", primaryKeys: ["id"])
  updateProductVariants(product_variants: ProductVariantsUpdateInput!, where: ProductVariantsWhereInput): ProductVariants @mysqlUpdate(subgraph: "Database", table: "product_variants")
  deleteProductVariants(where: ProductVariantsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "product_variants")
  insertProducts(products: ProductsInsertInput!): Products @mysqlInsert(subgraph: "Database", table: "products", primaryKeys: ["id"])
  updateProducts(products: ProductsUpdateInput!, where: ProductsWhereInput): Products @mysqlUpdate(subgraph: "Database", table: "products")
  deleteProducts(where: ProductsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "products")
  insertPromotionVariants(promotion_variants: PromotionVariantsInsertInput!): PromotionVariants @mysqlInsert(subgraph: "Database", table: "promotion_variants", primaryKeys: ["promotion_id", "variant_id"])
  updatePromotionVariants(promotion_variants: PromotionVariantsUpdateInput!, where: PromotionVariantsWhereInput): PromotionVariants @mysqlUpdate(subgraph: "Database", table: "promotion_variants")
  deletePromotionVariants(where: PromotionVariantsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "promotion_variants")
  insertPromotions(promotions: PromotionsInsertInput!): Promotions @mysqlInsert(subgraph: "Database", table: "promotions", primaryKeys: ["id"])
  updatePromotions(promotions: PromotionsUpdateInput!, where: PromotionsWhereInput): Promotions @mysqlUpdate(subgraph: "Database", table: "promotions")
  deletePromotions(where: PromotionsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "promotions")
  insertRatingImages(rating_images: RatingImagesInsertInput!): RatingImages @mysqlInsert(subgraph: "Database", table: "rating_images", primaryKeys: ["id"])
  updateRatingImages(rating_images: RatingImagesUpdateInput!, where: RatingImagesWhereInput): RatingImages @mysqlUpdate(subgraph: "Database", table: "rating_images")
  deleteRatingImages(where: RatingImagesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "rating_images")
  insertRoles(roles: RolesInsertInput!): Roles @mysqlInsert(subgraph: "Database", table: "roles", primaryKeys: ["id"])
  updateRoles(roles: RolesUpdateInput!, where: RolesWhereInput): Roles @mysqlUpdate(subgraph: "Database", table: "roles")
  deleteRoles(where: RolesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "roles")
  insertRolesSections(roles_sections: RolesSectionsInsertInput!): RolesSections @mysqlInsert(subgraph: "Database", table: "roles_sections", primaryKeys: ["id"])
  updateRolesSections(roles_sections: RolesSectionsUpdateInput!, where: RolesSectionsWhereInput): RolesSections @mysqlUpdate(subgraph: "Database", table: "roles_sections")
  deleteRolesSections(where: RolesSectionsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "roles_sections")
  insertSections(sections: SectionsInsertInput!): Sections @mysqlInsert(subgraph: "Database", table: "sections", primaryKeys: ["id"])
  updateSections(sections: SectionsUpdateInput!, where: SectionsWhereInput): Sections @mysqlUpdate(subgraph: "Database", table: "sections")
  deleteSections(where: SectionsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "sections")
  insertServices(services: ServicesInsertInput!): Services @mysqlInsert(subgraph: "Database", table: "services", primaryKeys: ["id"])
  updateServices(services: ServicesUpdateInput!, where: ServicesWhereInput): Services @mysqlUpdate(subgraph: "Database", table: "services")
  deleteServices(where: ServicesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "services")
  insertServicesImages(services_images: ServicesImagesInsertInput!): ServicesImages @mysqlInsert(subgraph: "Database", table: "services_images", primaryKeys: ["id"])
  updateServicesImages(services_images: ServicesImagesUpdateInput!, where: ServicesImagesWhereInput): ServicesImages @mysqlUpdate(subgraph: "Database", table: "services_images")
  deleteServicesImages(where: ServicesImagesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "services_images")
  insertUsers(users: UsersInsertInput!): Users @mysqlInsert(subgraph: "Database", table: "users", primaryKeys: ["id"])
  updateUsers(users: UsersUpdateInput!, where: UsersWhereInput): Users @mysqlUpdate(subgraph: "Database", table: "users")
  deleteUsers(where: UsersWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "users")
  insertVariantAttributeOptions(variant_attribute_options: VariantAttributeOptionsInsertInput!): VariantAttributeOptions @mysqlInsert(subgraph: "Database", table: "variant_attribute_options", primaryKeys: ["variant_id", "attribute_option_id"])
  updateVariantAttributeOptions(variant_attribute_options: VariantAttributeOptionsUpdateInput!, where: VariantAttributeOptionsWhereInput): VariantAttributeOptions @mysqlUpdate(subgraph: "Database", table: "variant_attribute_options")
  deleteVariantAttributeOptions(where: VariantAttributeOptionsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "variant_attribute_options")
  insertVariantImages(variant_images: VariantImagesInsertInput!): VariantImages @mysqlInsert(subgraph: "Database", table: "variant_images", primaryKeys: ["id"])
  updateVariantImages(variant_images: VariantImagesUpdateInput!, where: VariantImagesWhereInput): VariantImages @mysqlUpdate(subgraph: "Database", table: "variant_images")
  deleteVariantImages(where: VariantImagesWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "variant_images")
  insertVariantRatingSummary(variant_rating_summary: VariantRatingSummaryInsertInput!): VariantRatingSummary @mysqlInsert(subgraph: "Database", table: "variant_rating_summary", primaryKeys: [])
  updateVariantRatingSummary(variant_rating_summary: VariantRatingSummaryUpdateInput!, where: VariantRatingSummaryWhereInput): VariantRatingSummary @mysqlUpdate(subgraph: "Database", table: "variant_rating_summary")
  deleteVariantRatingSummary(where: VariantRatingSummaryWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "variant_rating_summary")
  insertVariantRatings(variant_ratings: VariantRatingsInsertInput!): VariantRatings @mysqlInsert(subgraph: "Database", table: "variant_ratings", primaryKeys: ["id"])
  updateVariantRatings(variant_ratings: VariantRatingsUpdateInput!, where: VariantRatingsWhereInput): VariantRatings @mysqlUpdate(subgraph: "Database", table: "variant_ratings")
  deleteVariantRatings(where: VariantRatingsWhereInput): Boolean @mysqlDelete(subgraph: "Database", table: "variant_ratings")
}

"""Imágenes para opciones de atributos (colores, materiales, etc.)"""
type AttributeOptionImages {
  id: Int!
  attributeOptionId: Int!
  imageType: AttributeOptionImagesImageType!
  displayOrder: Int
  """Imagen thumbnail 140x140 para selector de atributo"""
  imageUrlThumb: String!
  """Imagen normal 600x800 (opcional)"""
  imageUrlNormal: String!
  """Imagen zoom 1200x1200 (opcional)"""
  imageUrlZoom: String!
  """Texto alternativo"""
  altText: String
  createdAt: Timestamp!
  updatedAt: Timestamp!
  isPrimary: Int
  attributeOptions(where: AttributeOptionsWhereInput, orderBy: AttributeOptionsOrderByInput, limit: Int, offset: Int): [AttributeOptions] @mysqlSelect(subgraph: "Database", table: "attribute_options", columnMap: [["id", "attribute_option_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "attribute_option_id")
}

enum AttributeOptionImagesImageType {
  front
  back
  left
  right
  top
  bottom
  detail
  lifestyle
  packaging
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type AttributeOptions {
  id: Int!
  attributeId: Int!
  value: String!
  additionalCost: Float
  attributeOptionImages(limit: Int, offset: Int, where: AttributeOptionImagesWhereInput, orderBy: AttributeOptionImagesOrderByInput): [AttributeOptionImages] @mysqlSelect(subgraph: "Database", table: "attribute_option_images", columnMap: [["attribute_option_id", "id"]])
  attributes(where: AttributesWhereInput, orderBy: AttributesOrderByInput, limit: Int, offset: Int): [Attributes] @mysqlSelect(subgraph: "Database", table: "attributes", columnMap: [["id", "attribute_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "attribute_id")
  variantAttributeOptions(limit: Int, offset: Int, where: VariantAttributeOptionsWhereInput, orderBy: VariantAttributeOptionsOrderByInput): [VariantAttributeOptions] @mysqlSelect(subgraph: "Database", table: "variant_attribute_options", columnMap: [["attribute_option_id", "id"]])
}

"""Imágenes para opciones de atributos (colores, materiales, etc.)"""
input AttributeOptionImagesWhereInput {
  id: String
  attributeOptionId: String
  imageType: String
  displayOrder: String
  """Imagen thumbnail 140x140 para selector de atributo"""
  imageUrlThumb: String
  """Imagen normal 600x800 (opcional)"""
  imageUrlNormal: String
  """Imagen zoom 1200x1200 (opcional)"""
  imageUrlZoom: String
  """Texto alternativo"""
  altText: String
  createdAt: String
  updatedAt: String
  isPrimary: String
}

"""Imágenes para opciones de atributos (colores, materiales, etc.)"""
input AttributeOptionImagesOrderByInput {
  id: OrderBy
  attributeOptionId: OrderBy
  imageType: OrderBy
  displayOrder: OrderBy
  """Imagen thumbnail 140x140 para selector de atributo"""
  imageUrlThumb: OrderBy
  """Imagen normal 600x800 (opcional)"""
  imageUrlNormal: OrderBy
  """Imagen zoom 1200x1200 (opcional)"""
  imageUrlZoom: OrderBy
  """Texto alternativo"""
  altText: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
  isPrimary: OrderBy
}

enum OrderBy {
  asc
  desc
}

type Attributes {
  id: Int!
  name: String!
  displayType: AttributesDisplayType!
  attributeOptions(limit: Int, offset: Int, where: AttributeOptionsWhereInput, orderBy: AttributeOptionsOrderByInput): [AttributeOptions] @mysqlSelect(subgraph: "Database", table: "attribute_options", columnMap: [["attribute_id", "id"]])
}

enum AttributesDisplayType {
  radio
  pills
  select
  color
  custom
}

input AttributeOptionsWhereInput {
  id: String
  attributeId: String
  value: String
  additionalCost: String
}

input AttributeOptionsOrderByInput {
  id: OrderBy
  attributeId: OrderBy
  value: OrderBy
  additionalCost: OrderBy
}

input AttributesWhereInput {
  id: String
  name: String
  displayType: String
}

input AttributesOrderByInput {
  id: OrderBy
  name: OrderBy
  displayType: OrderBy
}

type VariantAttributeOptions {
  variantId: Int!
  attributeOptionId: Int!
  attributeOptions(where: AttributeOptionsWhereInput, orderBy: AttributeOptionsOrderByInput, limit: Int, offset: Int): [AttributeOptions] @mysqlSelect(subgraph: "Database", table: "attribute_options", columnMap: [["id", "attribute_option_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "attribute_option_id")
  productVariants(where: ProductVariantsWhereInput, orderBy: ProductVariantsOrderByInput, limit: Int, offset: Int): [ProductVariants] @mysqlSelect(subgraph: "Database", table: "product_variants", columnMap: [["id", "variant_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "variant_id")
}

type ProductVariants {
  id: Int!
  productId: Int!
  sku: String!
  price: Float!
  stock: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  products(where: ProductsWhereInput, orderBy: ProductsOrderByInput, limit: Int, offset: Int): [Products] @mysqlSelect(subgraph: "Database", table: "products", columnMap: [["id", "product_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "product_id")
  promotionVariants(limit: Int, offset: Int, where: PromotionVariantsWhereInput, orderBy: PromotionVariantsOrderByInput): [PromotionVariants] @mysqlSelect(subgraph: "Database", table: "promotion_variants", columnMap: [["variant_id", "id"]])
  variantAttributeOptions(limit: Int, offset: Int, where: VariantAttributeOptionsWhereInput, orderBy: VariantAttributeOptionsOrderByInput): [VariantAttributeOptions] @mysqlSelect(subgraph: "Database", table: "variant_attribute_options", columnMap: [["variant_id", "id"]])
  variantImages(limit: Int, offset: Int, where: VariantImagesWhereInput, orderBy: VariantImagesOrderByInput): [VariantImages] @mysqlSelect(subgraph: "Database", table: "variant_images", columnMap: [["variant_id", "id"]])
  variantRatings(limit: Int, offset: Int, where: VariantRatingsWhereInput, orderBy: VariantRatingsOrderByInput): [VariantRatings] @mysqlSelect(subgraph: "Database", table: "variant_ratings", columnMap: [["variant_id", "id"]])
}

type Products {
  id: Int!
  name: String!
  description: String
  brandId: Int
  createdAt: Timestamp!
  updatedAt: Timestamp!
  basePrice: Float
  productCategories(limit: Int, offset: Int, where: ProductCategoriesWhereInput, orderBy: ProductCategoriesOrderByInput): [ProductCategories] @mysqlSelect(subgraph: "Database", table: "product_categories", columnMap: [["product_id", "id"]])
  productVariants(limit: Int, offset: Int, where: ProductVariantsWhereInput, orderBy: ProductVariantsOrderByInput): [ProductVariants] @mysqlSelect(subgraph: "Database", table: "product_variants", columnMap: [["product_id", "id"]])
  brands(where: BrandsWhereInput, orderBy: BrandsOrderByInput, limit: Int, offset: Int): [Brands] @mysqlSelect(subgraph: "Database", table: "brands", columnMap: [["id", "brand_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "brand_id")
}

type ProductCategories {
  productId: Int!
  categoryId: Int!
  categories(where: CategoriesWhereInput, orderBy: CategoriesOrderByInput, limit: Int, offset: Int): [Categories] @mysqlSelect(subgraph: "Database", table: "categories", columnMap: [["id", "category_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "category_id")
  products(where: ProductsWhereInput, orderBy: ProductsOrderByInput, limit: Int, offset: Int): [Products] @mysqlSelect(subgraph: "Database", table: "products", columnMap: [["id", "product_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "product_id")
}

type Categories {
  id: Int!
  name: String!
  description: String
  parentId: Int
  imageUrl: String
  productCategories(limit: Int, offset: Int, where: ProductCategoriesWhereInput, orderBy: ProductCategoriesOrderByInput): [ProductCategories] @mysqlSelect(subgraph: "Database", table: "product_categories", columnMap: [["category_id", "id"]])
}

input ProductCategoriesWhereInput {
  productId: String
  categoryId: String
}

input ProductCategoriesOrderByInput {
  productId: OrderBy
  categoryId: OrderBy
}

input CategoriesWhereInput {
  id: String
  name: String
  description: String
  parentId: String
  imageUrl: String
}

input CategoriesOrderByInput {
  id: OrderBy
  name: OrderBy
  description: OrderBy
  parentId: OrderBy
  imageUrl: OrderBy
}

input ProductsWhereInput {
  id: String
  name: String
  description: String
  brandId: String
  createdAt: String
  updatedAt: String
  basePrice: String
}

input ProductsOrderByInput {
  id: OrderBy
  name: OrderBy
  description: OrderBy
  brandId: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
  basePrice: OrderBy
}

input ProductVariantsWhereInput {
  id: String
  productId: String
  sku: String
  price: String
  stock: String
  createdAt: String
  updatedAt: String
}

input ProductVariantsOrderByInput {
  id: OrderBy
  productId: OrderBy
  sku: OrderBy
  price: OrderBy
  stock: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
}

type Brands {
  id: Int!
  name: String!
  products(limit: Int, offset: Int, where: ProductsWhereInput, orderBy: ProductsOrderByInput): [Products] @mysqlSelect(subgraph: "Database", table: "products", columnMap: [["brand_id", "id"]])
}

input BrandsWhereInput {
  id: String
  name: String
}

input BrandsOrderByInput {
  id: OrderBy
  name: OrderBy
}

type PromotionVariants {
  promotionId: Int!
  variantId: Int!
  promotionPrice: Float
  stockLimit: Int!
  createdAt: Timestamp!
  productVariants(where: ProductVariantsWhereInput, orderBy: ProductVariantsOrderByInput, limit: Int, offset: Int): [ProductVariants] @mysqlSelect(subgraph: "Database", table: "product_variants", columnMap: [["id", "variant_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "variant_id")
  promotions(where: PromotionsWhereInput, orderBy: PromotionsOrderByInput, limit: Int, offset: Int): [Promotions] @mysqlSelect(subgraph: "Database", table: "promotions", columnMap: [["id", "promotion_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "promotion_id")
}

type Promotions {
  id: Int!
  name: String!
  description: String
  startDate: DateTime!
  endDate: DateTime!
  discountType: PromotionsDiscountType!
  discountValue: Float!
  minPurchaseAmount: Float
  isActive: Int
  createdAt: Timestamp!
  updatedAt: Timestamp!
  promotionVariants(limit: Int, offset: Int, where: PromotionVariantsWhereInput, orderBy: PromotionVariantsOrderByInput): [PromotionVariants] @mysqlSelect(subgraph: "Database", table: "promotion_variants", columnMap: [["promotion_id", "id"]])
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum PromotionsDiscountType {
  percentage
  fixed_amount
}

input PromotionVariantsWhereInput {
  promotionId: String
  variantId: String
  promotionPrice: String
  stockLimit: String
  createdAt: String
}

input PromotionVariantsOrderByInput {
  promotionId: OrderBy
  variantId: OrderBy
  promotionPrice: OrderBy
  stockLimit: OrderBy
  createdAt: OrderBy
}

input PromotionsWhereInput {
  id: String
  name: String
  description: String
  startDate: String
  endDate: String
  discountType: String
  discountValue: String
  minPurchaseAmount: String
  isActive: String
  createdAt: String
  updatedAt: String
}

input PromotionsOrderByInput {
  id: OrderBy
  name: OrderBy
  description: OrderBy
  startDate: OrderBy
  endDate: OrderBy
  discountType: OrderBy
  discountValue: OrderBy
  minPurchaseAmount: OrderBy
  isActive: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
}

input VariantAttributeOptionsWhereInput {
  variantId: String
  attributeOptionId: String
}

input VariantAttributeOptionsOrderByInput {
  variantId: OrderBy
  attributeOptionId: OrderBy
}

"""Imágenes de variantes con múltiples tamaños y tipos"""
type VariantImages {
  id: Int!
  variantId: Int!
  imageType: VariantImagesImageType!
  """Imagen thumbnail 140x140"""
  imageUrlThumb: String!
  """Imagen normal 600x800"""
  imageUrlNormal: String!
  """Imagen zoom 1200x1200"""
  imageUrlZoom: String!
  """Imagen principal de la variante"""
  isPrimary: Int
  """Orden de visualización"""
  displayOrder: Int
  """Texto alternativo para SEO"""
  altText: String
  createdAt: Timestamp!
  updatedAt: Timestamp!
  productVariants(where: ProductVariantsWhereInput, orderBy: ProductVariantsOrderByInput, limit: Int, offset: Int): [ProductVariants] @mysqlSelect(subgraph: "Database", table: "product_variants", columnMap: [["id", "variant_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "variant_id")
}

enum VariantImagesImageType {
  front
  back
  left
  right
  top
  bottom
  detail
  lifestyle
  packaging
}

"""Imágenes de variantes con múltiples tamaños y tipos"""
input VariantImagesWhereInput {
  id: String
  variantId: String
  imageType: String
  """Imagen thumbnail 140x140"""
  imageUrlThumb: String
  """Imagen normal 600x800"""
  imageUrlNormal: String
  """Imagen zoom 1200x1200"""
  imageUrlZoom: String
  """Imagen principal de la variante"""
  isPrimary: String
  """Orden de visualización"""
  displayOrder: String
  """Texto alternativo para SEO"""
  altText: String
  createdAt: String
  updatedAt: String
}

"""Imágenes de variantes con múltiples tamaños y tipos"""
input VariantImagesOrderByInput {
  id: OrderBy
  variantId: OrderBy
  imageType: OrderBy
  """Imagen thumbnail 140x140"""
  imageUrlThumb: OrderBy
  """Imagen normal 600x800"""
  imageUrlNormal: OrderBy
  """Imagen zoom 1200x1200"""
  imageUrlZoom: OrderBy
  """Imagen principal de la variante"""
  isPrimary: OrderBy
  """Orden de visualización"""
  displayOrder: OrderBy
  """Texto alternativo para SEO"""
  altText: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
}

type VariantRatings {
  id: Int!
  variantId: Int!
  customerId: Int!
  rating: Int!
  review: String
  title: String
  verifiedPurchase: Int!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  ratingImages(limit: Int, offset: Int, where: RatingImagesWhereInput, orderBy: RatingImagesOrderByInput): [RatingImages] @mysqlSelect(subgraph: "Database", table: "rating_images", columnMap: [["rating_id", "id"]])
  customers(where: CustomersWhereInput, orderBy: CustomersOrderByInput, limit: Int, offset: Int): [Customers] @mysqlSelect(subgraph: "Database", table: "customers", columnMap: [["id", "customer_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "customer_id")
  productVariants(where: ProductVariantsWhereInput, orderBy: ProductVariantsOrderByInput, limit: Int, offset: Int): [ProductVariants] @mysqlSelect(subgraph: "Database", table: "product_variants", columnMap: [["id", "variant_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "variant_id")
}

type RatingImages {
  id: Int!
  ratingId: Int!
  imageUrl: String!
  createdAt: Timestamp!
  variantRatings(where: VariantRatingsWhereInput, orderBy: VariantRatingsOrderByInput, limit: Int, offset: Int): [VariantRatings] @mysqlSelect(subgraph: "Database", table: "variant_ratings", columnMap: [["id", "rating_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "rating_id")
}

input VariantRatingsWhereInput {
  id: String
  variantId: String
  customerId: String
  rating: String
  review: String
  title: String
  verifiedPurchase: String
  createdAt: String
  updatedAt: String
}

input VariantRatingsOrderByInput {
  id: OrderBy
  variantId: OrderBy
  customerId: OrderBy
  rating: OrderBy
  review: OrderBy
  title: OrderBy
  verifiedPurchase: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
}

input RatingImagesWhereInput {
  id: String
  ratingId: String
  imageUrl: String
  createdAt: String
}

input RatingImagesOrderByInput {
  id: OrderBy
  ratingId: OrderBy
  imageUrl: OrderBy
  createdAt: OrderBy
}

type Customers {
  id: Int!
  username: String!
  email: String!
  password: String!
  addressId: Int
  isActive: Int
  createdAt: Timestamp!
  updatedAt: Timestamp!
  lastname: String!
  photo: String
  name: String
  customersAddresses(limit: Int, offset: Int, where: CustomersAddressesWhereInput, orderBy: CustomersAddressesOrderByInput): [CustomersAddresses] @mysqlSelect(subgraph: "Database", table: "customers_addresses", columnMap: [["id_customer", "id"]])
  variantRatings(limit: Int, offset: Int, where: VariantRatingsWhereInput, orderBy: VariantRatingsOrderByInput): [VariantRatings] @mysqlSelect(subgraph: "Database", table: "variant_ratings", columnMap: [["customer_id", "id"]])
}

type CustomersAddresses {
  id: Int!
  name: String
  description: String
  idCustomer: Int
  createdAt: Timestamp!
  updatedAt: Timestamp!
  customers(where: CustomersWhereInput, orderBy: CustomersOrderByInput, limit: Int, offset: Int): [Customers] @mysqlSelect(subgraph: "Database", table: "customers", columnMap: [["id", "id_customer"]]) @mysqlTableForeign(subgraph: "Database", columnName: "id_customer")
}

input CustomersWhereInput {
  id: String
  username: String
  email: String
  password: String
  addressId: String
  isActive: String
  createdAt: String
  updatedAt: String
  lastname: String
  photo: String
  name: String
}

input CustomersOrderByInput {
  id: OrderBy
  username: OrderBy
  email: OrderBy
  password: OrderBy
  addressId: OrderBy
  isActive: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
  lastname: OrderBy
  photo: OrderBy
  name: OrderBy
}

input CustomersAddressesWhereInput {
  id: String
  name: String
  description: String
  idCustomer: String
  createdAt: String
  updatedAt: String
}

input CustomersAddressesOrderByInput {
  id: OrderBy
  name: OrderBy
  description: OrderBy
  idCustomer: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
}

type Banner {
  id: Int!
  title: String!
  subtitle: String
  description: String
  createdAt: Timestamp!
  updatedAt: Timestamp!
  displayOrder: Int
  link: String
  imageUrl: String
}

input BannerWhereInput {
  id: String
  title: String
  subtitle: String
  description: String
  createdAt: String
  updatedAt: String
  displayOrder: String
  link: String
  imageUrl: String
}

input BannerOrderByInput {
  id: OrderBy
  title: OrderBy
  subtitle: OrderBy
  description: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
  displayOrder: OrderBy
  link: OrderBy
  imageUrl: OrderBy
}

type Permissions {
  id: Int!
  name: String!
  createdAt: Timestamp!
  updatedAt: Timestamp!
}

input PermissionsWhereInput {
  id: String
  name: String
  createdAt: String
  updatedAt: String
}

input PermissionsOrderByInput {
  id: OrderBy
  name: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
}

"""VIEW"""
type ProductRatingSummary {
  productId: Int!
  totalRatings: BigInt!
  averageRating: Float
  fiveStar: Float
  fourStar: Float
  threeStar: Float
  twoStar: Float
  oneStar: Float
  verifiedPurchases: Float
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""VIEW"""
input ProductRatingSummaryWhereInput {
  productId: String
  totalRatings: String
  averageRating: String
  fiveStar: String
  fourStar: String
  threeStar: String
  twoStar: String
  oneStar: String
  verifiedPurchases: String
}

"""VIEW"""
input ProductRatingSummaryOrderByInput {
  productId: OrderBy
  totalRatings: OrderBy
  averageRating: OrderBy
  fiveStar: OrderBy
  fourStar: OrderBy
  threeStar: OrderBy
  twoStar: OrderBy
  oneStar: OrderBy
  verifiedPurchases: OrderBy
}

type Roles {
  id: Int!
  name: String!
  createdAt: Timestamp!
  updatedAt: Timestamp!
  rolesSections(limit: Int, offset: Int, where: RolesSectionsWhereInput, orderBy: RolesSectionsOrderByInput): [RolesSections] @mysqlSelect(subgraph: "Database", table: "roles_sections", columnMap: [["id_rol", "id"]])
  users(limit: Int, offset: Int, where: UsersWhereInput, orderBy: UsersOrderByInput): [Users] @mysqlSelect(subgraph: "Database", table: "users", columnMap: [["role_id", "id"]])
}

type RolesSections {
  id: Int!
  idSection: Int
  idRol: Int
  roles(where: RolesWhereInput, orderBy: RolesOrderByInput, limit: Int, offset: Int): [Roles] @mysqlSelect(subgraph: "Database", table: "roles", columnMap: [["id", "id_rol"]]) @mysqlTableForeign(subgraph: "Database", columnName: "id_rol")
  sections(where: SectionsWhereInput, orderBy: SectionsOrderByInput, limit: Int, offset: Int): [Sections] @mysqlSelect(subgraph: "Database", table: "sections", columnMap: [["id", "id_section"]]) @mysqlTableForeign(subgraph: "Database", columnName: "id_section")
}

input RolesWhereInput {
  id: String
  name: String
  createdAt: String
  updatedAt: String
}

input RolesOrderByInput {
  id: OrderBy
  name: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
}

type Sections {
  id: Int!
  name: String
  url: String
  image: String
  displayOrder: Int
  rolesSections(limit: Int, offset: Int, where: RolesSectionsWhereInput, orderBy: RolesSectionsOrderByInput): [RolesSections] @mysqlSelect(subgraph: "Database", table: "roles_sections", columnMap: [["id_section", "id"]])
}

input RolesSectionsWhereInput {
  id: String
  idSection: String
  idRol: String
}

input RolesSectionsOrderByInput {
  id: OrderBy
  idSection: OrderBy
  idRol: OrderBy
}

input SectionsWhereInput {
  id: String
  name: String
  url: String
  image: String
  displayOrder: String
}

input SectionsOrderByInput {
  id: OrderBy
  name: OrderBy
  url: OrderBy
  image: OrderBy
  displayOrder: OrderBy
}

type Users {
  id: Int!
  username: String!
  email: String!
  password: String!
  roleId: Int!
  isActive: Int
  createdAt: Timestamp!
  updatedAt: Timestamp!
  lastname: String!
  photo: String
  roles(where: RolesWhereInput, orderBy: RolesOrderByInput, limit: Int, offset: Int): [Roles] @mysqlSelect(subgraph: "Database", table: "roles", columnMap: [["id", "role_id"]]) @mysqlTableForeign(subgraph: "Database", columnName: "role_id")
}

input UsersWhereInput {
  id: String
  username: String
  email: String
  password: String
  roleId: String
  isActive: String
  createdAt: String
  updatedAt: String
  lastname: String
  photo: String
}

input UsersOrderByInput {
  id: OrderBy
  username: OrderBy
  email: OrderBy
  password: OrderBy
  roleId: OrderBy
  isActive: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
  lastname: OrderBy
  photo: OrderBy
}

type Services {
  id: Int!
  title: String!
  subtitle: String
  imageUrl: String
  slug: String
  description: String
  createdAt: Timestamp!
  updatedAt: Timestamp!
  displayOrder: Int
  servicesImages(limit: Int, offset: Int, where: ServicesImagesWhereInput, orderBy: ServicesImagesOrderByInput): [ServicesImages] @mysqlSelect(subgraph: "Database", table: "services_images", columnMap: [["id_service", "id"]])
}

type ServicesImages {
  id: Int!
  title: String
  subtitle: String
  description: String
  createdAt: Timestamp!
  updatedAt: Timestamp!
  displayOrder: Int
  idService: Int
  imageUrl: String
  services(where: ServicesWhereInput, orderBy: ServicesOrderByInput, limit: Int, offset: Int): [Services] @mysqlSelect(subgraph: "Database", table: "services", columnMap: [["id", "id_service"]]) @mysqlTableForeign(subgraph: "Database", columnName: "id_service")
}

input ServicesWhereInput {
  id: String
  title: String
  subtitle: String
  imageUrl: String
  slug: String
  description: String
  createdAt: String
  updatedAt: String
  displayOrder: String
}

input ServicesOrderByInput {
  id: OrderBy
  title: OrderBy
  subtitle: OrderBy
  imageUrl: OrderBy
  slug: OrderBy
  description: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
  displayOrder: OrderBy
}

input ServicesImagesWhereInput {
  id: String
  title: String
  subtitle: String
  description: String
  createdAt: String
  updatedAt: String
  displayOrder: String
  idService: String
  imageUrl: String
}

input ServicesImagesOrderByInput {
  id: OrderBy
  title: OrderBy
  subtitle: OrderBy
  description: OrderBy
  createdAt: OrderBy
  updatedAt: OrderBy
  displayOrder: OrderBy
  idService: OrderBy
  imageUrl: OrderBy
}

"""VIEW"""
type VariantRatingSummary {
  variantId: Int!
  totalRatings: BigInt!
  averageRating: Float
  fiveStar: Float
  fourStar: Float
  threeStar: Float
  twoStar: Float
  oneStar: Float
  verifiedPurchases: Float
}

"""VIEW"""
input VariantRatingSummaryWhereInput {
  variantId: String
  totalRatings: String
  averageRating: String
  fiveStar: String
  fourStar: String
  threeStar: String
  twoStar: String
  oneStar: String
  verifiedPurchases: String
}

"""VIEW"""
input VariantRatingSummaryOrderByInput {
  variantId: OrderBy
  totalRatings: OrderBy
  averageRating: OrderBy
  fiveStar: OrderBy
  fourStar: OrderBy
  threeStar: OrderBy
  twoStar: OrderBy
  oneStar: OrderBy
  verifiedPurchases: OrderBy
}

"""Imágenes para opciones de atributos (colores, materiales, etc.)"""
input AttributeOptionImagesInsertInput {
  id: Int
  attributeOptionId: Int!
  imageType: AttributeOptionImagesImageType
  displayOrder: Int
  """Imagen thumbnail 140x140 para selector de atributo"""
  imageUrlThumb: String!
  """Imagen normal 600x800 (opcional)"""
  imageUrlNormal: String!
  """Imagen zoom 1200x1200 (opcional)"""
  imageUrlZoom: String!
  """Texto alternativo"""
  altText: String
  createdAt: Timestamp
  updatedAt: Timestamp
  isPrimary: Int
}

"""Imágenes para opciones de atributos (colores, materiales, etc.)"""
input AttributeOptionImagesUpdateInput {
  id: Int
  attributeOptionId: Int
  imageType: AttributeOptionImagesImageType
  displayOrder: Int
  """Imagen thumbnail 140x140 para selector de atributo"""
  imageUrlThumb: String
  """Imagen normal 600x800 (opcional)"""
  imageUrlNormal: String
  """Imagen zoom 1200x1200 (opcional)"""
  imageUrlZoom: String
  """Texto alternativo"""
  altText: String
  createdAt: Timestamp
  updatedAt: Timestamp
  isPrimary: Int
}

input AttributeOptionsInsertInput {
  id: Int
  attributeId: Int!
  value: String!
  additionalCost: Float
}

input AttributeOptionsUpdateInput {
  id: Int
  attributeId: Int
  value: String
  additionalCost: Float
}

input AttributesInsertInput {
  id: Int
  name: String!
  displayType: AttributesDisplayType
}

input AttributesUpdateInput {
  id: Int
  name: String
  displayType: AttributesDisplayType
}

input BannerInsertInput {
  id: Int
  title: String!
  subtitle: String
  description: String
  createdAt: Timestamp
  updatedAt: Timestamp
  displayOrder: Int
  link: String
  imageUrl: String
}

input BannerUpdateInput {
  id: Int
  title: String
  subtitle: String
  description: String
  createdAt: Timestamp
  updatedAt: Timestamp
  displayOrder: Int
  link: String
  imageUrl: String
}

input BrandsInsertInput {
  id: Int
  name: String!
}

input BrandsUpdateInput {
  id: Int
  name: String
}

input CategoriesInsertInput {
  id: Int
  name: String!
  description: String
  parentId: Int
  imageUrl: String
}

input CategoriesUpdateInput {
  id: Int
  name: String
  description: String
  parentId: Int
  imageUrl: String
}

input CustomersInsertInput {
  id: Int
  username: String!
  email: String!
  password: String!
  addressId: Int
  isActive: Int
  createdAt: Timestamp
  updatedAt: Timestamp
  lastname: String!
  photo: String
  name: String
}

input CustomersUpdateInput {
  id: Int
  username: String
  email: String
  password: String
  addressId: Int
  isActive: Int
  createdAt: Timestamp
  updatedAt: Timestamp
  lastname: String
  photo: String
  name: String
}

input CustomersAddressesInsertInput {
  id: Int
  name: String
  description: String
  idCustomer: Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

input CustomersAddressesUpdateInput {
  id: Int
  name: String
  description: String
  idCustomer: Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

input PermissionsInsertInput {
  id: Int
  name: String!
  createdAt: Timestamp
  updatedAt: Timestamp
}

input PermissionsUpdateInput {
  id: Int
  name: String
  createdAt: Timestamp
  updatedAt: Timestamp
}

input ProductCategoriesInsertInput {
  productId: Int!
  categoryId: Int!
}

input ProductCategoriesUpdateInput {
  productId: Int
  categoryId: Int
}

"""VIEW"""
input ProductRatingSummaryInsertInput {
  productId: Int!
  totalRatings: BigInt
  averageRating: Float
  fiveStar: Float
  fourStar: Float
  threeStar: Float
  twoStar: Float
  oneStar: Float
  verifiedPurchases: Float
}

"""VIEW"""
input ProductRatingSummaryUpdateInput {
  productId: Int
  totalRatings: BigInt
  averageRating: Float
  fiveStar: Float
  fourStar: Float
  threeStar: Float
  twoStar: Float
  oneStar: Float
  verifiedPurchases: Float
}

input ProductVariantsInsertInput {
  id: Int
  productId: Int!
  sku: String!
  price: Float!
  stock: Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

input ProductVariantsUpdateInput {
  id: Int
  productId: Int
  sku: String
  price: Float
  stock: Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

input ProductsInsertInput {
  id: Int
  name: String!
  description: String
  brandId: Int
  createdAt: Timestamp
  updatedAt: Timestamp
  basePrice: Float
}

input ProductsUpdateInput {
  id: Int
  name: String
  description: String
  brandId: Int
  createdAt: Timestamp
  updatedAt: Timestamp
  basePrice: Float
}

input PromotionVariantsInsertInput {
  promotionId: Int!
  variantId: Int!
  promotionPrice: Float
  stockLimit: Int!
  createdAt: Timestamp
}

input PromotionVariantsUpdateInput {
  promotionId: Int
  variantId: Int
  promotionPrice: Float
  stockLimit: Int
  createdAt: Timestamp
}

input PromotionsInsertInput {
  id: Int
  name: String!
  description: String
  startDate: DateTime!
  endDate: DateTime!
  discountType: PromotionsDiscountType
  discountValue: Float!
  minPurchaseAmount: Float
  isActive: Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

input PromotionsUpdateInput {
  id: Int
  name: String
  description: String
  startDate: DateTime
  endDate: DateTime
  discountType: PromotionsDiscountType
  discountValue: Float
  minPurchaseAmount: Float
  isActive: Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

input RatingImagesInsertInput {
  id: Int
  ratingId: Int!
  imageUrl: String!
  createdAt: Timestamp
}

input RatingImagesUpdateInput {
  id: Int
  ratingId: Int
  imageUrl: String
  createdAt: Timestamp
}

input RolesInsertInput {
  id: Int
  name: String!
  createdAt: Timestamp
  updatedAt: Timestamp
}

input RolesUpdateInput {
  id: Int
  name: String
  createdAt: Timestamp
  updatedAt: Timestamp
}

input RolesSectionsInsertInput {
  id: Int
  idSection: Int
  idRol: Int
}

input RolesSectionsUpdateInput {
  id: Int
  idSection: Int
  idRol: Int
}

input SectionsInsertInput {
  id: Int
  name: String
  url: String
  image: String
  displayOrder: Int
}

input SectionsUpdateInput {
  id: Int
  name: String
  url: String
  image: String
  displayOrder: Int
}

input ServicesInsertInput {
  id: Int
  title: String!
  subtitle: String
  imageUrl: String
  slug: String
  description: String
  createdAt: Timestamp
  updatedAt: Timestamp
  displayOrder: Int
}

input ServicesUpdateInput {
  id: Int
  title: String
  subtitle: String
  imageUrl: String
  slug: String
  description: String
  createdAt: Timestamp
  updatedAt: Timestamp
  displayOrder: Int
}

input ServicesImagesInsertInput {
  id: Int
  title: String
  subtitle: String
  description: String
  createdAt: Timestamp
  updatedAt: Timestamp
  displayOrder: Int
  idService: Int
  imageUrl: String
}

input ServicesImagesUpdateInput {
  id: Int
  title: String
  subtitle: String
  description: String
  createdAt: Timestamp
  updatedAt: Timestamp
  displayOrder: Int
  idService: Int
  imageUrl: String
}

input UsersInsertInput {
  id: Int
  username: String!
  email: String!
  password: String!
  roleId: Int!
  isActive: Int
  createdAt: Timestamp
  updatedAt: Timestamp
  lastname: String!
  photo: String
}

input UsersUpdateInput {
  id: Int
  username: String
  email: String
  password: String
  roleId: Int
  isActive: Int
  createdAt: Timestamp
  updatedAt: Timestamp
  lastname: String
  photo: String
}

input VariantAttributeOptionsInsertInput {
  variantId: Int!
  attributeOptionId: Int!
}

input VariantAttributeOptionsUpdateInput {
  variantId: Int
  attributeOptionId: Int
}

"""Imágenes de variantes con múltiples tamaños y tipos"""
input VariantImagesInsertInput {
  id: Int
  variantId: Int!
  imageType: VariantImagesImageType
  """Imagen thumbnail 140x140"""
  imageUrlThumb: String!
  """Imagen normal 600x800"""
  imageUrlNormal: String!
  """Imagen zoom 1200x1200"""
  imageUrlZoom: String!
  """Imagen principal de la variante"""
  isPrimary: Int
  """Orden de visualización"""
  displayOrder: Int
  """Texto alternativo para SEO"""
  altText: String
  createdAt: Timestamp
  updatedAt: Timestamp
}

"""Imágenes de variantes con múltiples tamaños y tipos"""
input VariantImagesUpdateInput {
  id: Int
  variantId: Int
  imageType: VariantImagesImageType
  """Imagen thumbnail 140x140"""
  imageUrlThumb: String
  """Imagen normal 600x800"""
  imageUrlNormal: String
  """Imagen zoom 1200x1200"""
  imageUrlZoom: String
  """Imagen principal de la variante"""
  isPrimary: Int
  """Orden de visualización"""
  displayOrder: Int
  """Texto alternativo para SEO"""
  altText: String
  createdAt: Timestamp
  updatedAt: Timestamp
}

"""VIEW"""
input VariantRatingSummaryInsertInput {
  variantId: Int!
  totalRatings: BigInt
  averageRating: Float
  fiveStar: Float
  fourStar: Float
  threeStar: Float
  twoStar: Float
  oneStar: Float
  verifiedPurchases: Float
}

"""VIEW"""
input VariantRatingSummaryUpdateInput {
  variantId: Int
  totalRatings: BigInt
  averageRating: Float
  fiveStar: Float
  fourStar: Float
  threeStar: Float
  twoStar: Float
  oneStar: Float
  verifiedPurchases: Float
}

input VariantRatingsInsertInput {
  id: Int
  variantId: Int!
  customerId: Int!
  rating: Int
  review: String
  title: String
  verifiedPurchase: Int
  createdAt: Timestamp
  updatedAt: Timestamp
}

input VariantRatingsUpdateInput {
  id: Int
  variantId: Int
  customerId: Int
  rating: Int
  review: String
  title: String
  verifiedPurchase: Int
  createdAt: Timestamp
  updatedAt: Timestamp
}